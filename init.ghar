(set defmacro (macro (name args . body)
	'(set ,name (macro ,args . @body))))

(defmacro defn (name args . body)
	'(set ,name (lambda ,args . @body)))

(defmacro alias (old-name new-name)
	'(defmacro ,new-name args
		(cons ,old-name args)))

(alias set defvar)

(defmacro if (test true false)
	'(cond (,test ,true) (t ,false)))

(defmacro begin terms
	'(let () . @terms))

(alias begin progn)

(set f nil)

(set else t)

(set *PATH* (string-split PATH ":"))

(setenv HOSTNAME (car ($ (hostname))))

(defn cd path
	(let ([result (apply --cd path)])
		(setenv PWD (car ($ (pwd))))
		result))

(defn *prompt* ()
	(string-append USER "@" HOSTNAME ":" PWD "$ "))

(defn fold (fn seed lst)
	(loop ([res seed] [l lst])
		(if (= l nil)
			res
			(recur (fn (car l) res) (cdr l)))))

(defn map (fn lst)
	(reverse
		(fold
			(lambda (el l) (cons (fn el) l))
			nil
			lst)))

(defn filter (fn lst)
	(reverse
		(fold
			(lambda (el l)
				(if (fn el)
					(cons el l)
					l))
			nil
			lst)))

(defn for-each (fn lst)
	(map fn lst)
	nil)

(defmacro for (var in lst . body)
	(assert (= in 'in) "syntax-error" "missing keyword: in")
	'(for-each
		(lambda (,var) . @body)
		,lst))

(defmacro while (con . body)
	'(loop ()
		(if ,con
			(begin (begin . @body) (recur))
			nil)))

(defn != (a b)
	(not (= a b)))

(defn is-member (x lst)
	(let ([result (filter (lambda (y) (= x y)) lst)])
		(if (= result nil)
			nil
			t)))

(defn obj-is-member (x lst)
	(let ([result (filter (lambda (y) (is x y)) lst)])
		(if (= result nil)
			nil
			t)))

(setenv TRASH (string-append HOME "/.local/share/Trash"))

(defn trash files
	(for file in files
		(mv file (string-append TRASH "/files/" (string file)))
		(to (string-append TRASH "/info/" (string file) ".trashinfo")
			(print "[Trash Info]")
			(print (string-append "Path=" (string file)))
			(date "+DeletionDate=%Y-%m-%dT%H%M%S"))))

(defn rmtrash ()
	(for file in ($ (ls '-A TRASH))
		(rm '-rf (string-append TRASH "/files/" file))
		(rm (string-append TRASH "/info/" file ".trashinfo"))))

# load user's gharialrc file if it exists
(let ([rc (string-append HOME "/.gharialrc")])
	(if (test '-f rc)
		(load rc)
		nil))

