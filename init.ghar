(set defmacro (macro (name args . body)
	'(set ,name (macro ,args . @body))))

(defmacro defn (name args . body)
	'(set ,name (lambda ,args . @body)))

(defmacro alias (old-name new-name)
	'(defmacro ,new-name args
		(cons ,old-name args)))

(alias set defvar)

(defmacro if (test true false)
	'(cond (,test ,true) (t ,false)))

(defmacro begin terms
	'(let () . @terms))

(alias begin progn)

(set f nil)

(set else t)

(set *PATH* (string-split PATH ":"))

(setenv HOSTNAME (car ($ (hostname))))

(defn cd path
	(let ([result (apply --cd path)])
		(setenv PWD (car ($ (pwd))))
		result))

(defn *prompt* ()
	(string-append USER "@" HOSTNAME ":" PWD "$ "))

(defn fold (fn seed lst)
	(loop ([res seed] [l lst])
		(if (= l nil)
			res
			(recur (fn (car l) res) (cdr l)))))

(defn map (fn lst)
	(reverse
		(fold
			(lambda (el l) (cons (fn el) l))
			nil
			lst)))

(defn filter (fn lst)
	(reverse
		(fold
			(lambda (el l)
				(if (fn el)
					(cons el l)
					l))
			nil
			lst)))

(defn for-each (fn lst)
	(map fn lst)
	nil)

(defmacro for (var in lst . body)
	(assert (= in 'in) "syntax-error" "missing keyword: in")
	'(for-each
		(lambda (,var) . @body)
		,lst))

(defmacro while (con . body)
	'(loop ()
		(if ,con
			(begin (begin . @body) (recur))
			nil)))

(defn != (a b)
	(not (= a b)))

(defn is-member (x lst)
	(let ([result (filter (lambda (y) (= x y)) lst)])
		(if (= result nil)
			nil
			t)))

(defn obj-is-member (x lst)
	(let ([result (filter (lambda (y) (is x y)) lst)])
		(if (= result nil)
			nil
			t)))

(defn formatln (output fmt . fmt-args)
	(let ([str (string-append fmt "~%")])
		(apply format '(,output ,str . @fmt-args))))

(defmacro $$ args
	'(apply string-join (cons (format nil "~%") ($ . @args))))

(defmacro car$ args
	'(car ($ . @args)))

(setenv TRASH (string-append HOME "/.local/share/Trash"))

# move specified files to the trash
(defn trash files
	(for file in files
		(loop ([n 1])
			(let ([trash-name (if (= n 1)
								(string file)
								(string-append "." (car$ (println n))))])
				(if (test '-e (string-append TRASH "/files/" trash-name))
					(recur (+ n 1))
					(begin
						(to (string-append TRASH "/info/" trash-name ".trashinfo")
							(println "[Trash Info]")
							(println (string-append "Path=" (car$ (readlink '-f (string file)))))
							(date "+DeletionDate=%Y-%m-%dT%H:%M:%S"))
						(mv file (string-append TRASH "/files/" trash-name))))))))

# delete all files in trash
(defn rmtrash ()
	(for file in ($ (ls '-A (string-append TRASH "/files/")))
		(rm '-rf (string-append TRASH "/files/" file))
		(rm (string-append TRASH "/info/" file ".trashinfo"))))

# restore specified file in trash
(defn restore (file)
	(let ([path (car (cdr (string-split (car (cdr ($ (cat (string-append TRASH "/info/" (string file) ".trashinfo"))))) "=")))])
		(mv (string-append TRASH "/files/" (string file)) path)
		(rm (string-append TRASH "/info/" (string file) ".trashinfo"))))

(defmacro pop (lst)
	'(let ([res (car ,lst)])
		(set ,lst (cdr ,lst))
		res))

(defmacro push (lst val)
	'(begin (set ,lst (cons ,val ,lst))
			,val))

(defn cddr (lst)
	(cdr (cdr lst)))

(defn cadr (lst)
	(car (cdr lst)))

(defn caddr (lst)
	(car (cdr (cdr lst))))

(defn cdddr (lst)
	(cdr (cdr (cdr lst))))

(defn -group (arg1 op arg2 . rest)
	(-group-op (cons (list op (-group-op arg1 op) (-group-op arg2 op)) rest) op))

(defn -can-group (lst op)
	(cond
		[(< (length lst) 3) f]
		[(= (cadr lst) op) t]
		[t f]))

(defn -group-op (lst op)
	(cond
		[(!= (type lst) "cons") lst]
		[(-can-group lst op) (apply -group lst)]
		[t (cons (-group-op (car lst) op) (-group-op (cdr lst) op))]))

(defn -group-ops (lst ops)
	(loop ([l lst] [o ops])
		(if	(= o nil)
			l
			(recur (-group-op l (car o)) (cdr o)))))

(defn -unnest (lst)
	(cond
		[(!= (type lst) "cons") lst]
		[(> (length lst) 1) (map -unnest lst)]
		[(!= (type (car lst)) "cons") (map -unnest lst)]
		[t (-unnest (car lst))]))

(defn infix (lst ops)
	(-unnest (-group-ops lst ops)))

(defmacro math args
	(infix args '(^ / * + - < <= > >= =)))


# load user's gharialrc file if it exists
(let ([rc (string-append HOME "/.gharialrc")])
	(if (test '-f rc)
		(load rc)
		nil))

